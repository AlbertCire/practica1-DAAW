const mongoose = require('mongoose');
mongoose.Promise = global.Promise;
const slug = require('slugs');

const staySchema = new mongoose.Schema({
    name: {
        type: String,
        trim: true, // this normalizes names
        required: 'Please enter a stay name!' //"name" is mandatory
    },
    slug : String, //this element will be autogenerated
    description: {
        type: String,
        trim: true
    },
    price: {
        type: String,
        trim: true
    },
    tags: [String], //array of strings
    guests: String,
    location: String,
    created: {
        type: Date,
        default: Date.now
    },
    photo: String,
    author: {
        type: mongoose.Schema.ObjectId,
        ref: 'User', // tell MongoDB the relation with model "User"
        required: 'You must supply an author'
    }
});

// ********PRE-SAVE HOOK********* -
staySchema.pre('save', async function(next) {
    if (!this.isModified('name')) {
        next();
        return; //stop this function from running
    }
    this.slug = slug(this.name);
   
    const slugRegEx = new RegExp(`^(${this.slug})((-[0-9]*$)?)$`, 'i');

    const staysWithSlug = await this.constructor.find({ slug: slugRegEx});

    if (staysWithSlug.length) { //if slug exists -> increment
        this.slug = `${this.slug}-${staysWithSlug.length+1}`;
    }

    next(); //follow the PIPELINE -> do the SAVE
});

// *********INDEXES**********
staySchema.index({
    location: 'text', //we will search in the name attribute
    guests: 'text' //we will search in the desc. attribute
});

staySchema.statics.getTagsList = function() {
    return this.aggregate([
        { $unwind: '$tags' },
        { $group: {_id: '$tags', count: { $sum: 1 } } },
        { $sort: { count: -1 } }
    ]);
};

staySchema.virtual('reviews', {
    ref: 'Review', // foreign model -> REVIEW
    //which FIELD on our STAY needs to match up with which field on the foreing model
    localField: '_id',
    foreignField: 'stay'
});

function autopopulate(next) {
    this.populate('reviews');
    next();
}

// ********PRE-FIND HOOKs******** --> populate virtual field REVIEWs
staySchema.pre('find', autopopulate);
staySchema.pre('findOne', autopopulate);

staySchema.statics.getTopStays = function() {
    return this.aggregate([
        {   $lookup: {
                from: 'reviews',
                localField: '_id',
                foreignField: 'stay',
                as: 'reviews'
            }
        },
        {   $match: {
                'reviews.1': { $exists: true}
            }
        },
        {   $addFields: {
                averageRating: {$avg: '$reviews.rating'}
            }
        },
        {   $sort: {
                averageRating: -1
            }
        },
        { $limit: 3 }
    ]);
};

//link Stay with the staySchema and make it importable
module.exports = mongoose.model('Stay', staySchema);